#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int val;
    struct node * next;
} node_t;

void print_list(node_t * head) {
    node_t * current = head;

    while (current != NULL) {
        printf("%d\n", current->val);
        current = current->next;
    }
}

int pop(node_t ** head) {
    int retval = -1;
    node_t * next_node = NULL;

    if (*head == NULL) {
        return -1;
    }

    next_node = (*head)->next;
    retval = (*head)->val;
    free(*head);
    *head = next_node;

    return retval;
}

int remove_by_value(node_t ** head, int val) {
    if (*head == NULL) {
        return -1;
    }
    /* TODO: fill in your code here */
    node_t*current = (*head);
    if ((*head)->val==val){
        printf("Head is the node to erase\n");
        node_t*referencing = (*head)->next;
        free((*head));
        (*head) = referencing;
    } else{
        while((*current)->next->val != val){
            printf("%d is not %d\n", (*current)->next->val, val);
            current = (*current)->next;
        }
        printf("%d is %d\n", (*current)->next->val, val);
        node_t*referencing = (*current)->next->next;
        free((*current)->next);
        (*current) = referencing;
    };
    
}

int main() {

    node_t * test_list = malloc(sizeof(node_t));
    test_list->val = 1;
    test_list->next = malloc(sizeof(node_t));
    test_list->next->val = 2;
    test_list->next->next = malloc(sizeof(node_t));
    test_list->next->next->val = 3;
    test_list->next->next->next = malloc(sizeof(node_t));
    test_list->next->next->next->val = 4;
    test_list->next->next->next->next = NULL;

    remove_by_value(&test_list, 3);

    print_list(test_list);
}

/*--------------------------------------------------------------------------------------
And now the solution*/

#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int val;
    struct node * next;
} node_t;

void print_list(node_t * head) {
    node_t * current = head;

    while (current != NULL) {
        printf("%d\n", current->val);
        current = current->next;
    }
}

int pop(node_t ** head) {
    int retval = -1;
    node_t * next_node = NULL;

    if (*head == NULL) {
        return -1;
    }

    next_node = (*head)->next;
    retval = (*head)->val;
    free(*head);
    *head = next_node;

    return retval;
}

int remove_by_value(node_t ** head, int val) {
    if (*head == NULL) {
        return -1;
    }
    /* TODO: fill in your code here */
    node_t*current = (*head);
    if ((*head)->val==val){
        printf("Head is the node to erase\n");
        node_t*referencing = (*head)->next;
        free((*head));
        (*head) = referencing;
    } else{
        while(current->next->val != val){
            /*printf("%d is not %d\n", current->next->val, val);*/
            current = current->next;
        }
        /*printf("%d is %d\n", current->next->val, val);*/
        node_t*referencing = current->next->next;
        free(current->next);
        current->next = referencing;
    };
    
}

int main() {

    node_t * test_list = malloc(sizeof(node_t));
    test_list->val = 1;
    test_list->next = malloc(sizeof(node_t));
    test_list->next->val = 2;
    test_list->next->next = malloc(sizeof(node_t));
    test_list->next->next->val = 3;
    test_list->next->next->next = malloc(sizeof(node_t));
    test_list->next->next->next->val = 4;
    test_list->next->next->next->next = NULL;

    remove_by_value(&test_list, 3);

    print_list(test_list);
}
